// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MZSwifts
import CoreGraphics
import Foundation
@_exported import MZSwifts
import MobileCoreServices
import StoreKit
import Swift
import UIKit
public typealias MZFloat = Swift.Double
extension Double {
  public var float: Swift.Float {
    get
  }
  public var double: Swift.Double {
    get
  }
  public var cgFloat: CoreGraphics.CGFloat {
    get
  }
}
extension Float : MZSwifts.MZFloatToStringProtocol {
  public var int: Swift.Int {
    get
  }
  public var double: Swift.Double {
    get
  }
  public var mzFloat: MZSwifts.MZFloat {
    get
  }
  public var cgFloat: CoreGraphics.CGFloat {
    get
  }
  public init?(localed string: Swift.String, as locale: Foundation.Locale)
}
extension Double : MZSwifts.MZFloatToStringProtocol {
  public init?(localed string: Swift.String, as locale: Foundation.Locale)
}
extension Int {
  public var mzFloat: MZSwifts.MZFloat {
    get
  }
  public var cgFloat: CoreGraphics.CGFloat {
    get
  }
  public var float: Swift.Float {
    get
  }
  public var double: Swift.Double {
    get
  }
  public var int32: Swift.Int32 {
    get
  }
  public var uint: Swift.UInt {
    get
  }
  public var uint16: Swift.UInt16 {
    get
  }
}
extension UInt {
  public var int: Swift.Int {
    get
  }
  public var int32: Swift.Int32 {
    get
  }
}
extension Bool {
  public func string(true: Swift.String = "true", false: Swift.String = "false") -> Swift.String
}
public protocol MZFloatToStringProtocol {
  init?(localed string: Swift.String, as locale: Foundation.Locale)
  func string(digits: Swift.Int?, locale: Foundation.Locale?) -> Swift.String
}
extension MZFloatToStringProtocol where Self : Swift.CVarArg {
  public func string(digits: Swift.Int? = nil, locale: Foundation.Locale? = nil) -> Swift.String
}
extension String {
  public func int(removeNonNumbersCharacters: Swift.Bool = true, locale: Foundation.Locale = Locale.current) -> Swift.Int?
  public func float(removeNonNumbersCharacters: Swift.Bool = true, locale: Foundation.Locale = Locale.current) -> Swift.Float?
  public func double(removeNonNumbersCharacters: Swift.Bool = true, locale: Foundation.Locale = Locale.current) -> Swift.Double?
  public func cgFloat(removeNonNumbersCharacters: Swift.Bool = true, locale: Foundation.Locale = Locale.current) -> CoreGraphics.CGFloat?
  public func mzFloat(removeNonNumbersCharacters: Swift.Bool = true, locale: Foundation.Locale = Locale.current) -> MZSwifts.MZFloat?
}
public class MZSampleUpdateTimer {
  public var delta: Swift.Double {
    get
  }
  public var passed: Swift.Double {
    get
  }
  public init()
  public func update(currentTime: Foundation.TimeInterval)
  @objc deinit
}
public class MZUIPresentViewOnTopWithMask {
  public init()
  public func show(presentFor presentView: UIKit.UIView? = nil, on parentView: UIKit.UIView? = nil, beforePresenting: ((UIKit.UIView) -> ())? = nil)
  public func hide(forPresented view: UIKit.UIView? = nil, animating: Swift.Bool = true)
  @objc deinit
}
extension CGFloat : MZSwifts.MZFloatToStringProtocol {
  public var mzFloat: MZSwifts.MZFloat {
    get
  }
  public var double: Swift.Double {
    get
  }
  public var float: Swift.Float {
    get
  }
  public var int: Swift.Int {
    get
  }
  public init?(localed string: Swift.String, as locale: Foundation.Locale)
}
extension CGPoint {
  public static var one: CoreGraphics.CGPoint {
    get
  }
  public init(x: Swift.Float, y: Swift.Float)
  public init(size: CoreGraphics.CGSize)
  public var size: CoreGraphics.CGSize {
    get
  }
  public var vector: CoreGraphics.CGVector {
    get
  }
}
public func + (lhs: CoreGraphics.CGPoint, rhs: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
public func - (lhs: CoreGraphics.CGPoint, rhs: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
public func * (lhs: CoreGraphics.CGPoint, rhs: CoreGraphics.CGFloat) -> CoreGraphics.CGPoint
public func * (lhs: CoreGraphics.CGPoint, rhs: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
public func / (lhs: CoreGraphics.CGPoint, rhs: CoreGraphics.CGFloat) -> CoreGraphics.CGPoint
public func / (lhs: CoreGraphics.CGPoint, rhs: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
public func += (lhs: inout CoreGraphics.CGPoint, rhs: CoreGraphics.CGPoint)
public func -= (lhs: inout CoreGraphics.CGPoint, rhs: CoreGraphics.CGPoint)
public func *= (lhs: inout CoreGraphics.CGPoint, rhs: CoreGraphics.CGFloat)
public func *= (lhs: inout CoreGraphics.CGPoint, rhs: CoreGraphics.CGPoint)
extension CGSize {
  public static var zero: CoreGraphics.CGSize {
    get
  }
  public static var one: CoreGraphics.CGSize {
    get
  }
  public var point: CoreGraphics.CGPoint {
    get
  }
  public var maxEdge: CoreGraphics.CGFloat {
    get
  }
  public var minEdge: CoreGraphics.CGFloat {
    get
  }
  public init(widthHeight: CoreGraphics.CGFloat)
}
public func + (lhs: CoreGraphics.CGSize, rhs: CoreGraphics.CGSize) -> CoreGraphics.CGSize
public func - (lhs: CoreGraphics.CGSize, rhs: CoreGraphics.CGSize) -> CoreGraphics.CGSize
public func * (lhs: CoreGraphics.CGSize, rhs: CoreGraphics.CGFloat) -> CoreGraphics.CGSize
public func * (lhs: CoreGraphics.CGSize, rhs: CoreGraphics.CGSize) -> CoreGraphics.CGSize
public func / (lhs: CoreGraphics.CGSize, rhs: CoreGraphics.CGFloat) -> CoreGraphics.CGSize
extension CGRect {
  public static var one: CoreGraphics.CGRect {
    get
  }
  public init(center: CoreGraphics.CGPoint, size: CoreGraphics.CGSize)
  public init(centerX: CoreGraphics.CGFloat, centerY: CoreGraphics.CGFloat, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
  public init(size: CoreGraphics.CGSize)
  public init(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
  public var center: CoreGraphics.CGPoint {
    get
    set
  }
  public func width(withLerp lerp: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public func height(withLerp lerp: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public func xPosition(withLerp lerp: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public func yPosition(withLerp lerp: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public func position(withXLerp xLerp: CoreGraphics.CGFloat, andYLerp yLerp: CoreGraphics.CGFloat) -> CoreGraphics.CGPoint
  public var topLeft: CoreGraphics.CGPoint {
    get
  }
  public var topRight: CoreGraphics.CGPoint {
    get
  }
  public var bottomLeft: CoreGraphics.CGPoint {
    get
  }
  public var bottomRight: CoreGraphics.CGPoint {
    get
  }
}
public func * (lhs: CoreGraphics.CGRect, rhs: CoreGraphics.CGFloat) -> CoreGraphics.CGRect
extension CGVector {
  public func mapToRadians(radians: CoreGraphics.CGFloat) -> CoreGraphics.CGVector
  public var point: CoreGraphics.CGPoint {
    get
  }
}
public func + (lhs: CoreGraphics.CGVector, rhs: CoreGraphics.CGVector) -> CoreGraphics.CGVector
public func - (lhs: CoreGraphics.CGVector, rhs: CoreGraphics.CGVector) -> CoreGraphics.CGVector
public func * (lhs: CoreGraphics.CGVector, rhs: CoreGraphics.CGFloat) -> CoreGraphics.CGVector
public func * (lhs: CoreGraphics.CGVector, rhs: CoreGraphics.CGVector) -> CoreGraphics.CGVector
public func / (lhs: CoreGraphics.CGVector, rhs: CoreGraphics.CGFloat) -> CoreGraphics.CGVector
public func / (lhs: CoreGraphics.CGVector, rhs: CoreGraphics.CGVector) -> CoreGraphics.CGVector
public func += (lhs: inout CoreGraphics.CGVector, rhs: CoreGraphics.CGVector)
public func -= (lhs: inout CoreGraphics.CGVector, rhs: CoreGraphics.CGVector)
public func *= (lhs: inout CoreGraphics.CGVector, rhs: CoreGraphics.CGFloat)
public func /= (lhs: inout CoreGraphics.CGVector, rhs: CoreGraphics.CGFloat)
public func * (lhs: CoreGraphics.CGPoint, rhs: CoreGraphics.CGSize) -> CoreGraphics.CGPoint
@_hasMissingDesignatedInitializers public class MZPath {
  public static var appDocument: Swift.String {
    get
  }
  @objc deinit
}
extension String {
  public func toInt(ignores: [Swift.String] = [], trimInvalid: Swift.Bool = false) -> Swift.Int?
  public func toDouble(ignores: [Swift.String] = [], trimInvalid: Swift.Bool = false) -> Swift.Double?
  public func toSeconds() -> Swift.Double?
}
public struct MZEnvironment {
  public static func isSimulator() -> Swift.Bool
  public static func isDevice() -> Swift.Bool
}
public struct MZVector {
  public static func unitVector(ofDegrees degrees: MZSwifts.MZFloat) -> CoreGraphics.CGVector
  public static func unitVector(ofRadians radians: MZSwifts.MZFloat) -> CoreGraphics.CGVector
  public static func unitVector(from: CoreGraphics.CGPoint, to: CoreGraphics.CGPoint) -> CoreGraphics.CGVector
  public static func vector(fromVector vector: CoreGraphics.CGVector, mapToRadians radians: MZSwifts.MZFloat) -> CoreGraphics.CGVector
  public static func vector(fromVector vector: CoreGraphics.CGVector, mapToDegrees degrees: MZSwifts.MZFloat) -> CoreGraphics.CGVector
  public static func dot(vector1: CoreGraphics.CGVector, vector2: CoreGraphics.CGVector) -> MZSwifts.MZFloat
  public static func length(ofVector vector: CoreGraphics.CGVector) -> MZSwifts.MZFloat
}
@_hasMissingDesignatedInitializers public class MZDataExtension {
  @objc deinit
}
extension Data {
  public func copyBytes<ConvertedType>(to array: inout [ConvertedType])
  public func copyBytes<ConvertedType>(to value: inout ConvertedType)
}
@objc public class MZInAppPurchaseManger : ObjectiveC.NSObject {
  public var canMakePayments: Swift.Bool {
    get
  }
  public var productIdentifiers: Swift.Set<Swift.String> {
    get
  }
  public var products: [StoreKit.SKProduct] {
    get
  }
  public init(productIdentifiers: Swift.Set<Swift.String>)
  public func requestProducts(handler: (([StoreKit.SKProduct]?, Swift.Error?) -> ())?)
  public func sendPayment(with product: StoreKit.SKProduct, success: ((Swift.String) -> ())? = nil, fail: ((Swift.String) -> ())? = nil)
  public func sendRestoreRequest(handler: (([Swift.String]?, Swift.Error?) -> ())? = nil)
  @objc deinit
  @objc override dynamic public init()
}
extension MZInAppPurchaseManger : StoreKit.SKProductsRequestDelegate {
  @objc dynamic public func request(_ request: StoreKit.SKRequest, didFailWithError error: Swift.Error)
  @objc dynamic public func productsRequest(_ request: StoreKit.SKProductsRequest, didReceive response: StoreKit.SKProductsResponse)
}
extension MZInAppPurchaseManger : StoreKit.SKPaymentTransactionObserver {
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, updatedTransactions transactions: [StoreKit.SKPaymentTransaction])
  @objc dynamic public func paymentQueueRestoreCompletedTransactionsFinished(_ queue: StoreKit.SKPaymentQueue)
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, restoreCompletedTransactionsFailedWithError error: Swift.Error)
}
public protocol MZTouchNotifierProtocol : AnyObject {
  func addTouchResponder(touchResponder: MZSwifts.MZTouchResponderProtocol)
  func removeTouchResponder(touchResponder: MZSwifts.MZTouchResponderProtocol)
  func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  func positionWithTouch(touch: UIKit.UITouch) -> CoreGraphics.CGPoint
}
public protocol MZTouchResponderProtocol : AnyObject {
  var touchNotifier: MZSwifts.MZTouchNotifierProtocol! { get set }
  func touchesBegan(touches: Swift.Set<UIKit.UITouch>)
  func touchesMoved(touches: Swift.Set<UIKit.UITouch>)
  func touchesEnded(touches: Swift.Set<UIKit.UITouch>)
  func removeFromNotifier()
}
public enum MZTouchType : Swift.Int {
  case began
  case moved
  case ended
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension MZTouchType : Swift.CaseIterable {
  public typealias AllCases = [MZSwifts.MZTouchType]
  public static var allCases: [MZSwifts.MZTouchType] {
    get
  }
}
extension MZTouchType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class MZAngle {
  public enum CircularMotion : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
    case clockwise
    case counterClockwise
    public var description: Swift.String {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [MZSwifts.MZAngle.CircularMotion]
    public static var allCases: [MZSwifts.MZAngle.CircularMotion] {
      get
    }
  }
  public class func degrees(ofRadians radians: MZSwifts.MZFloat) -> MZSwifts.MZFloat
  public class func radians(ofDegrees degree: MZSwifts.MZFloat) -> MZSwifts.MZFloat
  public class func formatDegree(_ origin: MZSwifts.MZFloat) -> MZSwifts.MZFloat
  public class func degree(fromVector from: CoreGraphics.CGVector, toVector to: CoreGraphics.CGVector) -> MZSwifts.MZFloat
  public class func degree(fromXAxisToVector vector: CoreGraphics.CGVector) -> MZSwifts.MZFloat
  public class func radians(fromXAxisToVector vector: CoreGraphics.CGVector) -> MZSwifts.MZFloat
  public class func degress(from: CoreGraphics.CGPoint, to: CoreGraphics.CGPoint) -> MZSwifts.MZFloat
  public class func radians(from: CoreGraphics.CGPoint, to: CoreGraphics.CGPoint) -> MZSwifts.MZFloat
  public class func isOver(from: MZSwifts.MZFloat, to: MZSwifts.MZFloat, add: MZSwifts.MZFloat, circularMotion: MZSwifts.MZAngle.CircularMotion = CircularMotion.counterClockwise) -> Swift.Bool
  public class func shortestDegreeDistance(from: MZSwifts.MZFloat, to: MZSwifts.MZFloat) -> MZSwifts.MZFloat
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MZType {
  public class func className(ofObject object: Swift.AnyObject) -> Swift.String
  @objc deinit
}
public protocol MZNotificationComponentEventProtocol : Swift.CaseIterable {
  var notificationName: Foundation.Notification.Name { get }
}
public protocol MZNotificationComponentProtocol {
  associatedtype NotifyEvent
  var baseCenter: Foundation.NotificationCenter { get }
  func observe(_ event: Self.NotifyEvent, observer: Any, action: ObjectiveC.Selector)
  func remove(observer: Any, event: Self.NotifyEvent)
  func remove(observer: Any)
  func post(_ event: Self.NotifyEvent, userInfo: [Swift.AnyHashable : Any]?)
}
extension MZNotificationComponentProtocol where Self.NotifyEvent : MZSwifts.MZNotificationComponentEventProtocol {
  public var baseCenter: Foundation.NotificationCenter {
    get
  }
  public func observe(_ event: Self.NotifyEvent, observer: Any, action: ObjectiveC.Selector)
  public func observe(_ event: Self.NotifyEvent, queue: Foundation.OperationQueue?, using block: @escaping (Foundation.Notification) -> Swift.Void) -> ObjectiveC.NSObjectProtocol
  public func remove(observer: Any, event: Self.NotifyEvent)
  public func remove(observer: Any)
  public func post(_ event: Self.NotifyEvent, userInfo: [Swift.AnyHashable : Any]? = nil)
}
@objc @_inheritsConvenienceInitializers public class MZMediaLibraryPicker : ObjectiveC.NSObject {
  public func show(in parent: UIKit.UIViewController, sourceType: UIKit.UIImagePickerController.SourceType, controllerSetting: ((UIKit.UIImagePickerController) -> ())? = nil, done: ((UIKit.UIImage?) -> ())?)
  @objc deinit
  @objc override dynamic public init()
}
extension MZMediaLibraryPicker : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension UIColor {
  convenience public init(hex: Swift.Int)
}
public class MZTimer {
  public var isCancelled: Swift.Bool {
    get
  }
  public var state: MZSwifts.MZTimer.State {
    get
  }
  public init(repeating: Dispatch.DispatchTimeInterval, queue: Dispatch.DispatchQueue? = nil, event: (() -> ())?)
  public func resume()
  public func suspend()
  public func activate()
  public func cancel()
  @objc deinit
}
extension MZTimer {
  public enum State {
    case suspended
    case resumed
    public static func == (a: MZSwifts.MZTimer.State, b: MZSwifts.MZTimer.State) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@_hasMissingDesignatedInitializers public class MZImage {
  public enum Format {
    case png
    case jpg(compressionQuality: CoreGraphics.CGFloat)
  }
  public class func cropping(cgImage: CoreGraphics.CGImage, toRect cropRect: CoreGraphics.CGRect) -> CoreGraphics.CGImage?
  public class func cropping(uiImage: UIKit.UIImage, toRect cropRect: CoreGraphics.CGRect) -> UIKit.UIImage?
  public class func rotate(uiImage image: UIKit.UIImage?, orientation: UIKit.UIImage.Orientation) -> UIKit.UIImage?
  @objc deinit
}
extension UIImage {
  public func data(as format: MZSwifts.MZImage.Format = .png) -> Foundation.Data?
  public func normalized() -> UIKit.UIImage
  public func resized(to targetSize: CoreGraphics.CGSize) -> UIKit.UIImage
  public func resized(maxEdge: CoreGraphics.CGFloat, forceResizeIfLess: Swift.Bool = false) -> UIKit.UIImage
}
@_hasMissingDesignatedInitializers public class MZInputUtility {
  public static func editingNumberText(of text: Swift.String?) -> Swift.String?
  public static func numberText(of text: Swift.String?, range: Swift.Range<Swift.Double>? = nil, unit: Swift.String) -> Swift.String?
  @objc deinit
}
extension MZInputUtility {
  public class func AsAmount(unit: Swift.String = "g") -> MZSwifts.MZInputUtility.AsNumber
  public class func AsTempture() -> MZSwifts.MZInputUtility.AsNumber
  @objc public class AsNumber : ObjectiveC.NSObject {
    required public init(unit: Swift.String, range: Swift.Range<Swift.Double>? = nil)
    public func apply(to textFileds: [UIKit.UITextField])
    @objc deinit
    @objc override dynamic public init()
  }
}
extension MZInputUtility {
  @objc public class TextInputToolBar : ObjectiveC.NSObject {
    public init?(setTo textInputs: [UIKit.UIView], tintColor: UIKit.UIColor? = nil)
    @objc deinit
    @objc override dynamic public init()
  }
}
extension MZInputUtility {
  @objc public class TextFieldMaxLength : ObjectiveC.NSObject {
    public init?(setTo textFields: [UIKit.UITextField], maxLength: Swift.Int)
    @objc deinit
    @objc override dynamic public init()
  }
}
extension MZInputUtility {
  @objc public class TextViewControl : ObjectiveC.NSObject, UIKit.UITextViewDelegate {
    public init(textView: UIKit.UITextView, maxLength: Swift.Int? = nil, placeholder: Swift.String? = nil)
    @objc deinit
    public func update()
    @objc public func textViewDidChange(_ textView: UIKit.UITextView)
    @objc override dynamic public init()
  }
}
public struct MZMath {
  public static func lerp(numerator: MZSwifts.MZFloat, denominator: MZSwifts.MZFloat, canOverOne: Swift.Bool = false) -> MZSwifts.MZFloat
  public static func lerp(numerator: CoreGraphics.CGFloat, denominator: CoreGraphics.CGFloat, canOverOne: Swift.Bool = false) -> CoreGraphics.CGFloat
  public static func randomInt(range: Swift.Range<Swift.Int>) -> Swift.Int
  public static func randomInt(min: Swift.Int = 0, includeMax max: Swift.Int) -> Swift.Int
  public static func randomFloat(min: MZSwifts.MZFloat = 0.0, max: MZSwifts.MZFloat = 1.0) -> MZSwifts.MZFloat
  public static func valueInBound<T>(origin: T, lower: T, upper: T) -> T where T : Swift.Comparable
  public static func distancePow2(from: CoreGraphics.CGPoint, to: CoreGraphics.CGPoint) -> CoreGraphics.CGFloat
  public static func distance(from: CoreGraphics.CGPoint, to: CoreGraphics.CGPoint) -> CoreGraphics.CGFloat
}
@_hasMissingDesignatedInitializers public class MZDebug {
  public static var isEnable: Swift.Bool
  public class func log(_ item: Any? = nil, filePath: Swift.String = #file, functionName: Swift.String = #function, line: Swift.Int = #line)
  public class func logFunctionName(prefix: Swift.String? = nil, filePath: Swift.String = #file, functionName: Swift.String = #function, line: Swift.Int = #line)
  public class func timeLog(_ message: Swift.String, filePath: Swift.String = #file, functionName: Swift.String = #function, line: Swift.Int = #line)
  public class func assert(predicate: @autoclosure () -> Swift.Bool, message: Swift.String, filePath: Swift.String = #file, functionName: Swift.String = #function, line: Swift.Int = #line)
  public class func assert(noNil target: Any?)
  public class func assertAlwayFalse(_ message: Swift.String, filePath: Swift.String = #file, functionName: Swift.String = #function, line: Swift.Int = #line)
  public class func overrideMe(filePath: Swift.String = #file, functionName: Swift.String = #function, line: Swift.Int = #line) -> Swift.Never
  public class func youCannotPass(filePath: Swift.String = #file, functionName: Swift.String = #function, line: Swift.Int = #line) -> Swift.Never
  public class func implementMe(filePath: Swift.String = #file, functionName: Swift.String = #function, line: Swift.Int = #line)
  public class func formatLogString(filePath: Swift.String = #file, functionName: Swift.String = #function, line: Swift.Int = #line) -> Swift.String
  public class func fileNameInPath(path: Swift.String = #file) -> Swift.String
  public class func fatalError(_ message: Swift.String, filePath: Swift.String = #file, functionName: Swift.String = #function, line: Swift.Int = #line) -> Swift.Never
  public class func logDocumentPath()
  @objc deinit
}
extension MZDebug {
  public class func fatalUnkonowSegue(to any: Any)
}
@_hasMissingDesignatedInitializers public class MZUIs {
  public class func topViewController() -> UIKit.UIViewController?
  @objc deinit
}
extension UIView {
  public func set(anchorPoint: CoreGraphics.CGPoint)
  public func addCircleMask()
  public func drawBorder(color: UIKit.UIColor = UIColor.green, width: CoreGraphics.CGFloat = 2)
  public func copyView<T>() -> T where T : UIKit.UIView
}
extension UINavigationBar {
  public func removeShadow()
}
extension UIImageView {
  public var contentClippingRect: CoreGraphics.CGRect {
    get
  }
}
extension Date {
  public func string(withFormat format: Swift.String? = "yyyyMMdd-HHmmss", local: Foundation.Locale? = nil, timeZone: Foundation.TimeZone? = nil) -> Swift.String
  public func string(dateStyle: Foundation.DateFormatter.Style, local: Foundation.Locale? = nil, timeZone: Foundation.TimeZone? = nil) -> Swift.String
}
extension Data {
  public var kilobyte: Swift.Float {
    get
  }
  public var megabyte: Swift.Float {
    get
  }
}
public class MZUIControlKeyboardEventsOnView {
  public var needDoWillShowFunc: ((Foundation.Notification) -> Swift.Bool)?
  public var willShowAction: ((Foundation.Notification) -> ())?
  public var willHiddenAction: ((Foundation.Notification) -> ())?
  weak public var view: UIKit.UIView! {
    get
  }
  public init(on view: UIKit.UIView? = nil)
  public func addControl(to view: UIKit.UIView)
  public func removeControl()
  @objc deinit
}
extension MZUIControlKeyboardEventsOnView {
  public class func defaultNeedDoWillShowActionFunc() -> ((Foundation.Notification) -> Swift.Bool)
}
public class MZUIControlShfitViewForTextViewKeyboard : MZSwifts.MZUIControlKeyboardEventsOnView {
  public init(on view: UIKit.UIView, withCustomOffsetY offsetY: CoreGraphics.CGFloat? = nil)
  override public func removeControl()
  @objc deinit
  override public init(on view: UIKit.UIView? = super)
}
@_inheritsConvenienceInitializers public class MZUIControlTapToHideInput : MZSwifts.MZUIControlKeyboardEventsOnView {
  override public init(on view: UIKit.UIView? = nil)
  override public func addControl(to view: UIKit.UIView)
  override public func removeControl()
  @objc deinit
}
extension DispatchTimeInterval {
  public static func with(seconds: Swift.Double) -> Dispatch.DispatchTimeInterval
  public static func now(after seconds: Swift.Double) -> Dispatch.DispatchTime
}
extension DispatchTime {
  public static func now(after seconds: Swift.Double) -> Dispatch.DispatchTime
}
public class MZShapeEllipse {
  public var center: CoreGraphics.CGPoint
  public var a: MZSwifts.MZFloat
  public var b: MZSwifts.MZFloat
  public init(center: CoreGraphics.CGPoint, a: MZSwifts.MZFloat, b: MZSwifts.MZFloat)
  public func xWithRadians(radians: MZSwifts.MZFloat) -> MZSwifts.MZFloat
  public func yWithRadians(radians: MZSwifts.MZFloat) -> MZSwifts.MZFloat
  public func positionWithRadians(radians: MZSwifts.MZFloat) -> CoreGraphics.CGPoint
  public func positionWithDegrees(degrees: MZSwifts.MZFloat) -> CoreGraphics.CGPoint
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MZJson {
  public class func jsonData(ofAny any: Any) -> Foundation.Data?
  public class func jsonData(ofDictionary dictionary: [Swift.String : Swift.AnyObject]) -> Foundation.Data?
  public class func jsonString(from data: Foundation.Data) -> Swift.String?
  public class func jsonString(from dictionary: [Swift.String : Swift.AnyObject]) -> Swift.String?
  public class func array(from jsonString: Swift.String) -> [Swift.AnyObject]?
  public class func dictionary(from jsonString: Swift.String) -> [Swift.String : Swift.AnyObject]?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MZUnit {
  @objc deinit
}
extension MZUnit {
  @_hasMissingDesignatedInitializers public class Length {
    public static func meter(ofFeet feet: MZSwifts.MZFloat) -> MZSwifts.MZFloat
    public static func feet(ofMeter meter: MZSwifts.MZFloat) -> MZSwifts.MZFloat
    @objc deinit
  }
}
extension MZUnit {
  @_hasMissingDesignatedInitializers public class Temperature {
    public static func fahrenheit(ofCelsius celsius: MZSwifts.MZFloat) -> MZSwifts.MZFloat
    public static func celsius(ofFahrenheit fahrenheit: MZSwifts.MZFloat) -> MZSwifts.MZFloat
    @objc deinit
  }
}
extension MZUnit {
  public enum MeasurementSystem : Swift.CaseIterable {
    case metric
    case imperial
    public static func == (a: MZSwifts.MZUnit.MeasurementSystem, b: MZSwifts.MZUnit.MeasurementSystem) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [MZSwifts.MZUnit.MeasurementSystem]
    public static var allCases: [MZSwifts.MZUnit.MeasurementSystem] {
      get
    }
  }
}
extension MZUIs {
  @_hasMissingDesignatedInitializers public class AlertController {
    public static var actionTitleFunc: ((Swift.String) -> Swift.String)?
    @discardableResult
    public class func show(title: Swift.String? = nil, message: Swift.String? = nil, needLocalize: Swift.Bool = false, style: UIKit.UIAlertController.Style, actions: [UIKit.UIAlertAction]? = nil, in viewController: UIKit.UIViewController? = nil, actionSheetPadStyle: MZSwifts.MZUIs.AlertController.ActionSheetPadStyle = .default) -> UIKit.UIAlertController
    @discardableResult
    public class func showWithCancel(title: Swift.String? = nil, message: Swift.String? = nil, needLocalize: Swift.Bool = false, style: UIKit.UIAlertController.Style, actions: [UIKit.UIAlertAction]? = nil, in viewController: UIKit.UIViewController? = nil, cancelTitle: Swift.String = "Cancel", cancelAction: ((UIKit.UIAlertAction) -> ())? = nil, actionSheetPadStyle: MZSwifts.MZUIs.AlertController.ActionSheetPadStyle = .default) -> UIKit.UIAlertController
    @objc deinit
  }
}
extension MZUIs.AlertController {
  public enum ActionSheetPadStyle {
    case `default`
    case barButtonItem(UIKit.UIBarButtonItem)
    case customFrame(CoreGraphics.CGRect)
  }
}
extension MZSwifts.MZTouchType : Swift.Equatable {}
extension MZSwifts.MZTouchType : Swift.Hashable {}
extension MZSwifts.MZTouchType : Swift.RawRepresentable {}
extension MZSwifts.MZAngle.CircularMotion : Swift.Equatable {}
extension MZSwifts.MZAngle.CircularMotion : Swift.Hashable {}
extension MZSwifts.MZAngle.CircularMotion : Swift.RawRepresentable {}
extension MZSwifts.MZTimer.State : Swift.Equatable {}
extension MZSwifts.MZTimer.State : Swift.Hashable {}
extension MZSwifts.MZUnit.MeasurementSystem : Swift.Equatable {}
extension MZSwifts.MZUnit.MeasurementSystem : Swift.Hashable {}
